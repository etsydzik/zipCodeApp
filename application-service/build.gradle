buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.devsoap.plugin:gradle-vaadin-plugin:1.3.1"
    }
}

plugins {
//	id "net.ltgt.apt" version "0.10"
    id "net.ltgt.apt" version "0.15"
    id "com.devsoap.plugin.vaadin" version "1.3.1"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.devsoap.plugin.vaadin"

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "http://vaadin.com/nexus/content/repositories/vaadin-addons/" }
}

ext {
	vaadinVersion = '8.3.3'
	lombokVersion = '1.16.20'
}

dependencies {

	compile project(':data-service')

    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

	compile group: 'com.vaadin.demo', name: 'vaadin-charts-examples', version: '4.0.4'
	compile group: 'com.vaadin.addon', name: 'vaadin-charts', version: '4.0.0-alpha4'

    // system libraries (that's not contained in Maven repositories)
    // DEPRECATED: just try to avoid that old-school style and do a lookup in Maven Central
    compile fileTree(dir: "$rootDir/lib", include: ['*.jar'])


    compile('com.vaadin:vaadin-spring-boot-starter')
    compile('com.vaadin:vaadin-sass-compiler:0.9.13')
    compile 'javax.inject:javax.inject:1'
    compile('org.springframework.boot:spring-boot-starter-web')

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

dependencyManagement {
	imports {
		mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
	}
}

task widgetset {
//    print "+++++++++++++++++++++++++++++++${projectDir.absolutePath}+++++++++++++++++++++++++"
    def widgetsetClass = 'com.vaadin.addon.charts.Widgetset'
//    def webAppDirName = "${projectDir.absolutePath}/src/main/resources/"
    def webAppDirName = "${projectDir.absolutePath}/src/main/webapp/"

    print "widgetapp ${webAppDirName}"
    // Monitor changes in widgetset to rebuild widgetset
    def widgetsetFile = new File('src/' + widgetsetClass.replaceAll(/\./, '/') + ".gwt.xml")
    inputs.file widgetsetFile

    // Monitor changes in client side classes
//    sourceSets.main.java.srcDirs.each {
//        inputs.files fileTree(it.absolutePath).include('**/*/tsydzik/**/*.java')
//    }

    /* Monitor changes in dependencies since upgrading a
     * dependency should also trigger a recompile of the widgetset
     */
    inputs.files configurations.compile

    // Target directory as the output
    def targetDir = new File(webAppDirName + "/VAADIN/widgetsets")
    outputs.dir targetDir

    doLast {
        print '=====================before==============================='
        JavaExec javaExec = (JavaExec) project.task("runJar", type: JavaExec) {
//            classpath {
//                pathElement(path: configurations.compile.asPath)
//                pathElement(path: sourceSets.main.runtimeClasspath.asPath)
//                sourceSets.main.java.srcDirs.each {
//                    pathelement(location: it.absolutePath)
//                }
//            classpath = project.fileTree(dir: sourceSets.main.runtimeClasspath.asPath)
            classpath = files( sourceSets.main.runtimeClasspath.asPath,configurations.compile.asPath,sourceSets.main.java.srcDirs)
            main = 'com.google.gwt.dev.Compiler'
//            allJvmArgs = ['-Djava.awt.headless=true']
            args = [
                    "-logLevel",
                    "INFO",
                    "-strict",
                    "-war",
                    "${targetDir}",
                    "${widgetsetClass}"
            ]
        }
        javaExec.execute()
        print '=====================after==============================='
    }
//        // Compile
//        ant.java(classname: 'com.google.gwt.dev.Compiler', failOnError: 'yes', fork: 'true', maxmemory: '1g')
//                {
//                    classpath {
//                        pathElement(path: configurations.compile.asPath)
//                        pathElement(path: sourceSets.main.runtimeClasspath.asPath)
//                        sourceSets.main.java.srcDirs.each {
//                            pathelement(location: it.absolutePath)
//                        }
//                    }
//
//                    jvmarg(value: '-Xmx1024M')
//                    jvmarg(value: '-Xms512M')
//                    jvmarg(value: '-Djava.awt.headless=true')
//
//
//                    arg(line: '-logLevel INFO')
//                    arg(line: '-strict')
//                    arg(line: '-war ' + targetDir)
//                    arg(line: widgetsetClass)
//                }
//    }
}